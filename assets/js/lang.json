{
  "pt": {
    "navbar": {
      "title": "Guia Dash",
      "objectives": "Objetivos",
      "installation": "Instala√ß√£o",
      "tutorial": "Tutorial",
      "theme_dark": "Tema Escuro",
      "theme_light": "Tema Claro"
    },
    "hero": {
      "title": "Guia Pr√°tico para Graduandos:",
      "subtitle": "Dashboards Interativos com Dash e Plotly",
      "description": "Um guia completo para criar visualiza√ß√µes de dados din√¢micas e impactantes utilizando Python.",
      "start_button": "Iniciar Tutorial"
    },
    "objectives": {
      "title": "Objetivos da Cartilha",
      "description": "Esta cartilha foi desenvolvida para guiar estudantes de gradua√ß√£o na jornada de cria√ß√£o de dashboards interativos. Nossos principais objetivos s√£o:",
      "card1_title": "Introduzir Conceitos",
      "card1_description": "Apresentar os conceitos fundamentais por tr√°s da visualiza√ß√£o de dados e a import√¢ncia dos dashboards na an√°lise de informa√ß√µes.",
      "card2_title": "Ensinar Ferramentas",
      "card2_description": "Capacitar os alunos com o conhecimento pr√°tico das bibliotecas Dash e Plotly para a constru√ß√£o de dashboards em Python.",
      "card3_title": "Inspirar com Exemplos",
      "card3_description": "Fornecer exemplos pr√°ticos e com c√≥digo-fonte que sirvam como base e inspira√ß√£o para projetos futuros dos estudantes."
    },
    "installation": {
      "title": "Instala√ß√£o e Configura√ß√£o",
      "description": "Siga estes passos para configurar seu ambiente de desenvolvimento e executar seu primeiro dashboard.",
      "step1_title": "1. Instale o Visual Studio Code",
      "step1_description": "O VS Code √© um editor de c√≥digo-fonte leve, mas poderoso, que √© executado em seu desktop e est√° dispon√≠vel para Windows, macOS e Linux. Ele vem com suporte integrado para JavaScript, TypeScript e Node.js e tem um rico ecossistema de extens√µes para outras linguagens (como Python) e tempos de execu√ß√£o.",
      "step2_title": "2. Instale o `uv` (Gerenciador de Pacotes)",
      "step2_description": "`uv` √© um instalador e resolvedor de pacotes Python extremamente r√°pido, escrito em Rust. Ele √© projetado como um substituto para `pip` e `pip-tools`. Para instal√°-lo, siga as instru√ß√µes no",
      "step3_title": "3. Inicialize seu Projeto",
      "step3_description": "Navegue at√© a pasta do seu projeto no terminal e execute o comando abaixo. Isso criar√° um ambiente virtual e o arquivo `pyproject.toml`, que gerencia as depend√™ncias do seu projeto.",
      "step4_title": "4. Adicione as Depend√™ncias",
      "step4_description": "Agora, instale as bibliotecas Python necess√°rias para o nosso projeto. Este comando adicionar√° `dash`, `pandas` e outras bibliotecas √∫teis ao seu ambiente.",
      "step5_title": "5. Crie a Aplica√ß√£o M√≠nima",
      "step5_description": "Crie um arquivo chamado `main.py` e adicione o c√≥digo a seguir. Este √© um aplicativo Dash interativo para garantir que nossa configura√ß√£o est√° funcionando e para testar o hot-reload.",
      "step6_title": "6. Execute e Teste o Hot-Reload",
      "step6_description": "Execute o aplicativo. A op√ß√£o `debug=True` ativa o \"Hot Reload\", que recarrega o servidor automaticamente sempre que voc√™ salva uma altera√ß√£o no c√≥digo.",
      "warning": "Aten√ß√£o:",
      "warning_text": "Se voc√™ salvar o arquivo com um erro de sintaxe, o servidor pode parar. Se isso acontecer, corrija o erro e execute o comando `uv run python main.py` novamente."
    },
    "tutorial": {
      "title": "Construindo o Dashboard: Passo a Passo",
      "description": "Agora que o ambiente est√° configurado, vamos transformar nosso app m√≠nimo em um dashboard completo para an√°lise de dados de ecocardiogramas. Cada passo adiciona uma nova funcionalidade ao nosso projeto.",
      "step1_title": "Passo 1: Baixe o Conjunto de Dados",
      "step1_description": "O primeiro passo √© obter os dados.\n\n1. Acesse o Heart Disease Dataset no Kaggle.\n2. Baixe e extraia o arquivo `archive.zip`.\n3. Mova o `heart.csv` para a pasta do seu projeto.",
      "step2_title": "Passo 2: Imports e Leitura dos Dados",
      "step2_description": "Apague o c√≥digo m√≠nimo e comece com as importa√ß√µes espec√≠ficas. Carregue o arquivo `heart.csv` que voc√™ baixou. Execute para verificar se n√£o h√° erros de importa√ß√£o.",
      "step3_title": "Passo 3: Estrutura B√°sica do Layout",
      "step3_description": "Criamos a estrutura usando `dmc.AppShell()` com cabe√ßalho (`AppShellHeader`) e √°rea principal (`AppShellMain`). O `MantineProvider` fornece temas consistentes.",
      "step4_title": "Passo 4: Primeiro Gr√°fico",
      "step4_description": "Adicionamos nosso primeiro gr√°fico usando `px.histogram()` dentro de um `dmc.Card()`. O card possui se√ß√µes para t√≠tulo e conte√∫do, criando uma apresenta√ß√£o organizada.",
      "step5_title": "Passo 5: Sistema de Grid com M√∫ltiplos Gr√°ficos",
      "step5_description": "Implementamos um sistema de grid usando `dmc.Grid()` e `dmc.GridCol()` para organizar quatro tipos diferentes de gr√°ficos: histograma, barra, scatter e box plot.",
      "step6_title": "Passo 6: Tabela de Dados Interativa",
      "step6_description": "Adicionamos uma tabela interativa usando `dag.AgGrid()` que permite ordena√ß√£o, filtro e redimensionamento de colunas. A tabela ocupa a largura total com `span=12`.",
      "step7_title": "Passo 7: Bot√£o de Altern√¢ncia de Tema",
      "step7_description": "Adicionamos um `dmc.Switch()` com √≠cones do `DashIconify` para alternar entre temas claro e escuro. O `persistence=True` mant√©m a prefer√™ncia do usu√°rio.",
      "step8_title": "Passo 8: Callbacks e Interatividade",
      "step8_description": "Implementamos um `clientside_callback()` que executa JavaScript no navegador para alternar o tema instantaneamente, sem precisar comunicar com o servidor Python.",
      "step9_title": "Passo 9: Dashboard Completo e Interativo",
      "step9_description": "Parab√©ns! Voc√™ construiu um dashboard completo seguindo uma abordagem incremental. Cada passo adicionou uma funcionalidade espec√≠fica, permitindo compreender como cada elemento contribui para o resultado final.",
      "concepts_title": "üìö Conceitos Aprendidos:",
      "concepts": [
        "‚Ä¢ Importa√ß√µes organizadas: Como estruturar as depend√™ncias do projeto",
        "‚Ä¢ Layout responsivo: Uso do AppShell e sistema de Grid",
        "‚Ä¢ Componentes visuais: Cards, se√ß√µes e elementos de UI",
        "‚Ä¢ Visualiza√ß√µes de dados: Diferentes tipos de gr√°ficos com Plotly",
        "‚Ä¢ Tabelas interativas: AG-Grid com funcionalidades avan√ßadas",
        "‚Ä¢ Temas din√¢micos: Sistema de altern√¢ncia claro/escuro",
        "‚Ä¢ Callbacks: Interatividade client-side e server-side"
      ]
    },
    "footer": {
      "acknowledgments": "Agradecimentos",
      "acknowledgments_text": "Um agradecimento especial ao LaPS - Laborat√≥rio de Processamento de Sinais da UFPA pelo apoio e ao professor Ronaldo de Freitas Zampolo pela orienta√ß√£o.",
      "about_author": "Sobre o Autor",
      "author_name": "Jo√£o Natividade Neto",
      "author_description": "Graduando em Engenharia de Computa√ß√£o na Universidade Federal do Par√° - UFPA.",
      "copyright": "¬© 2025 Guia Dash. Criado para fins educacionais."
    }
  },
  "en": {
    "navbar": {
      "title": "Dash Guide",
      "objectives": "Objectives",
      "installation": "Installation",
      "tutorial": "Tutorial",
      "theme_dark": "Dark Theme",
      "theme_light": "Light Theme"
    },
    "hero": {
      "title": "Practical Guide for Students:",
      "subtitle": "Interactive Dashboards with Dash and Plotly",
      "description": "A complete guide to creating dynamic and impactful data visualizations using Python.",
      "start_button": "Start Tutorial"
    },
    "objectives": {
      "title": "Guide Objectives",
      "description": "This guide was developed to guide undergraduate students on their journey to create interactive dashboards. Our main objectives are:",
      "card1_title": "Introduce Concepts",
      "card1_description": "Present the fundamental concepts behind data visualization and the importance of dashboards in information analysis.",
      "card2_title": "Teach Tools",
      "card2_description": "Enable students with practical knowledge of Dash and Plotly libraries for building dashboards in Python.",
      "card3_title": "Inspire with Examples",
      "card3_description": "Provide practical examples with source code that serve as a foundation and inspiration for students' future projects."
    },
    "installation": {
      "title": "Installation and Configuration",
      "description": "Follow these steps to configure your development environment and run your first dashboard.",
      "step1_title": "1. Install Visual Studio Code",
      "step1_description": "VS Code is a lightweight but powerful source code editor that runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as Python) and runtimes.",
      "step2_title": "2. Install `uv` (Package Manager)",
      "step2_description": "`uv` is an extremely fast Python package installer and resolver written in Rust. It is designed as a drop-in replacement for `pip` and `pip-tools`. To install it, follow the instructions on the",
      "step3_title": "3. Initialize your Project",
      "step3_description": "Navigate to your project folder in the terminal and run the command below. This will create a virtual environment and the `pyproject.toml` file, which manages your project dependencies.",
      "step4_title": "4. Add Dependencies",
      "step4_description": "Now, install the Python libraries needed for our project. This command will add `dash`, `pandas` and other useful libraries to your environment.",
      "step5_title": "5. Create the Minimal Application",
      "step5_description": "Create a file called `main.py` and add the following code. This is an interactive Dash app to ensure our setup is working and to test hot-reload.",
      "step6_title": "6. Run and Test Hot-Reload",
      "step6_description": "Run the application. The `debug=True` option enables \"Hot Reload\", which automatically reloads the server whenever you save a change to the code.",
      "warning": "Warning:",
      "warning_text": "If you save the file with a syntax error, the server may stop. If this happens, fix the error and run the command `uv run python main.py` again."
    },
    "tutorial": {
      "title": "Building the Dashboard: Step by Step",
      "description": "Now that the environment is configured, let's transform our minimal app into a complete dashboard for echocardiogram data analysis. Each step adds a new functionality to our project.",
      "step1_title": "Step 1: Download the Dataset",
      "step1_description": "The first step is to obtain the data.\n\n1. Access the Heart Disease Dataset on Kaggle.\n2. Download and extract the `archive.zip` file.\n3. Move the `heart.csv` to your project folder.",
      "step2_title": "Step 2: Imports and Data Loading",
      "step2_description": "Delete the minimal code and start with specific imports. Load the `heart.csv` file you downloaded. Run to check for import errors.",
      "step3_title": "Step 3: Basic Layout Structure",
      "step3_description": "We create the structure using `dmc.AppShell()` with header (`AppShellHeader`) and main area (`AppShellMain`). The `MantineProvider` provides consistent themes.",
      "step4_title": "Step 4: First Graph",
      "step4_description": "We add our first graph using `px.histogram()` inside a `dmc.Card()`. The card has sections for title and content, creating an organized presentation.",
      "step5_title": "Step 5: Grid System with Multiple Charts",
      "step5_description": "We implement a grid system using `dmc.Grid()` and `dmc.GridCol()` to organize four different types of charts: histogram, bar, scatter and box plot.",
      "step6_title": "Step 6: Interactive Data Table",
      "step6_description": "We add an interactive table using `dag.AgGrid()` that allows sorting, filtering and column resizing. The table takes full width with `span=12`.",
      "step7_title": "Step 7: Theme Toggle Button",
      "step7_description": "We add a `dmc.Switch()` with `DashIconify` icons to toggle between light and dark themes. The `persistence=True` maintains user preference.",
      "step8_title": "Step 8: Callbacks and Interactivity",
      "step8_description": "We implement a `clientside_callback()` that runs JavaScript in the browser to toggle the theme instantly, without needing to communicate with the Python server.",
      "step9_title": "Step 9: Complete and Interactive Dashboard",
      "step9_description": "Congratulations! You built a complete dashboard following an incremental approach. Each step added a specific functionality, allowing you to understand how each element contributes to the final result.",
      "concepts_title": "üìö Concepts Learned:",
      "concepts": [
        "‚Ä¢ Organized imports: How to structure project dependencies",
        "‚Ä¢ Responsive layout: Using AppShell and Grid system",
        "‚Ä¢ Visual components: Cards, sections and UI elements",
        "‚Ä¢ Data visualizations: Different types of charts with Plotly",
        "‚Ä¢ Interactive tables: AG-Grid with advanced features",
        "‚Ä¢ Dynamic themes: Light/dark toggle system",
        "‚Ä¢ Callbacks: Client-side and server-side interactivity"
      ]
    },
    "footer": {
      "acknowledgments": "Acknowledgments",
      "acknowledgments_text": "Special thanks to LaPS - Signal Processing Laboratory at UFPA for the support and to professor Ronaldo de Freitas Zampolo for the guidance.",
      "about_author": "About the Author",
      "author_name": "Jo√£o Natividade Neto",
      "author_description": "Computer Engineering undergraduate at Federal University of Par√° - UFPA.",
      "copyright": "¬© 2025 Dash Guide. Created for educational purposes."
    }
  },
  "de": {
    "navbar": {
      "title": "Dash-Leitfaden",
      "objectives": "Ziele",
      "installation": "Installation",
      "tutorial": "Tutorial",
      "theme_dark": "Dunkles Thema",
      "theme_light": "Helles Thema"
    },
    "hero": {
      "title": "Praktischer Leitfaden f√ºr Studenten:",
      "subtitle": "Interaktive Dashboards mit Dash und Plotly",
      "description": "Ein vollst√§ndiger Leitfaden zur Erstellung dynamischer und wirkungsvoller Datenvisualisierungen mit Python.",
      "start_button": "Tutorial starten"
    },
    "objectives": {
      "title": "Leitfaden-Ziele",
      "description": "Dieser Leitfaden wurde entwickelt, um Studenten auf ihrer Reise zur Erstellung interaktiver Dashboards zu begleiten. Unsere Hauptziele sind:",
      "card1_title": "Konzepte einf√ºhren",
      "card1_description": "Die grundlegenden Konzepte der Datenvisualisierung und die Bedeutung von Dashboards in der Informationsanalyse vorstellen.",
      "card2_title": "Werkzeuge lehren",
      "card2_description": "Studenten mit praktischen Kenntnissen der Dash- und Plotly-Bibliotheken f√ºr die Erstellung von Dashboards in Python ausstatten.",
      "card3_title": "Mit Beispielen inspirieren",
      "card3_description": "Praktische Beispiele mit Quellcode bereitstellen, die als Grundlage und Inspiration f√ºr zuk√ºnftige Projekte der Studenten dienen."
    },
    "installation": {
      "title": "Installation und Konfiguration",
      "description": "Befolgen Sie diese Schritte, um Ihre Entwicklungsumgebung zu konfigurieren und Ihr erstes Dashboard auszuf√ºhren.",
      "step1_title": "1. Visual Studio Code installieren",
      "step1_description": "VS Code ist ein leichtgewichtiger, aber leistungsstarker Quellcode-Editor, der auf Ihrem Desktop l√§uft und f√ºr Windows, macOS und Linux verf√ºgbar ist. Er bietet integrierte Unterst√ºtzung f√ºr JavaScript, TypeScript und Node.js und verf√ºgt √ºber ein reiches √ñkosystem von Erweiterungen f√ºr andere Sprachen (wie Python) und Laufzeiten.",
      "step2_title": "2. `uv` installieren (Paket-Manager)",
      "step2_description": "`uv` ist ein extrem schneller Python-Paket-Installer und -Resolver, der in Rust geschrieben ist. Er ist als Drop-in-Ersatz f√ºr `pip` und `pip-tools` konzipiert. Um ihn zu installieren, folgen Sie den Anweisungen auf der",
      "step3_title": "3. Projekt initialisieren",
      "step3_description": "Navigieren Sie im Terminal zu Ihrem Projektordner und f√ºhren Sie den folgenden Befehl aus. Dies erstellt eine virtuelle Umgebung und die `pyproject.toml`-Datei, die Ihre Projektabh√§ngigkeiten verwaltet.",
      "step4_title": "4. Abh√§ngigkeiten hinzuf√ºgen",
      "step4_description": "Installieren Sie nun die f√ºr unser Projekt ben√∂tigten Python-Bibliotheken. Dieser Befehl f√ºgt `dash`, `pandas` und andere n√ºtzliche Bibliotheken zu Ihrer Umgebung hinzu.",
      "step5_title": "5. Minimale Anwendung erstellen",
      "step5_description": "Erstellen Sie eine Datei namens `main.py` und f√ºgen Sie den folgenden Code hinzu. Dies ist eine interaktive Dash-App, um sicherzustellen, dass unser Setup funktioniert und Hot-Reload zu testen.",
      "step6_title": "6. Hot-Reload ausf√ºhren und testen",
      "step6_description": "F√ºhren Sie die Anwendung aus. Die Option `debug=True` aktiviert \"Hot Reload\", das den Server automatisch neu l√§dt, wann immer Sie eine √Ñnderung am Code speichern.",
      "warning": "Achtung:",
      "warning_text": "Wenn Sie die Datei mit einem Syntaxfehler speichern, kann der Server stoppen. Falls dies passiert, beheben Sie den Fehler und f√ºhren Sie den Befehl `uv run python main.py` erneut aus."
    },
    "tutorial": {
      "title": "Dashboard erstellen: Schritt f√ºr Schritt",
      "description": "Nachdem die Umgebung konfiguriert ist, transformieren wir unsere minimale App in ein vollst√§ndiges Dashboard f√ºr die Analyse von Echokardiogramm-Daten. Jeder Schritt f√ºgt eine neue Funktionalit√§t zu unserem Projekt hinzu.",
      "step1_title": "Schritt 1: Dataset herunterladen",
      "step1_description": "Der erste Schritt ist, die Daten zu erhalten.\n\n1. Greifen Sie auf das Heart Disease Dataset auf Kaggle zu.\n2. Laden Sie die `archive.zip`-Datei herunter und extrahieren Sie sie.\n3. Verschieben Sie die `heart.csv` in Ihren Projektordner.",
      "step2_title": "Schritt 2: Imports und Datenladen",
      "step2_description": "L√∂schen Sie den minimalen Code und beginnen Sie mit spezifischen Imports. Laden Sie die `heart.csv`-Datei, die Sie heruntergeladen haben. F√ºhren Sie aus, um auf Import-Fehler zu pr√ºfen.",
      "step3_title": "Schritt 3: Grundlegende Layout-Struktur",
      "step3_description": "Wir erstellen die Struktur mit `dmc.AppShell()` mit Header (`AppShellHeader`) und Hauptbereich (`AppShellMain`). Der `MantineProvider` bietet konsistente Themes.",
      "step4_title": "Schritt 4: Erstes Diagramm",
      "step4_description": "Wir f√ºgen unser erstes Diagramm mit `px.histogram()` innerhalb einer `dmc.Card()` hinzu. Die Karte hat Abschnitte f√ºr Titel und Inhalt, was eine organisierte Pr√§sentation schafft.",
      "step5_title": "Schritt 5: Grid-System mit mehreren Diagrammen",
      "step5_description": "Wir implementieren ein Grid-System mit `dmc.Grid()` und `dmc.GridCol()`, um vier verschiedene Diagrammtypen zu organisieren: Histogramm, Balken, Scatter und Box Plot.",
      "step6_title": "Schritt 6: Interaktive Datentabelle",
      "step6_description": "Wir f√ºgen eine interaktive Tabelle mit `dag.AgGrid()` hinzu, die Sortierung, Filterung und Spaltengr√∂√üen√§nderung erm√∂glicht. Die Tabelle nimmt die volle Breite mit `span=12` ein.",
      "step7_title": "Schritt 7: Theme-Umschalt-Button",
      "step7_description": "Wir f√ºgen einen `dmc.Switch()` mit `DashIconify`-Icons hinzu, um zwischen hellen und dunklen Themes zu wechseln. Das `persistence=True` beh√§lt die Benutzereinstellung bei.",
      "step8_title": "Schritt 8: Callbacks und Interaktivit√§t",
      "step8_description": "Wir implementieren einen `clientside_callback()`, der JavaScript im Browser ausf√ºhrt, um das Theme sofort zu wechseln, ohne mit dem Python-Server kommunizieren zu m√ºssen.",
      "step9_title": "Schritt 9: Vollst√§ndiges und interaktives Dashboard",
      "step9_description": "Herzlichen Gl√ºckwunsch! Sie haben ein vollst√§ndiges Dashboard mit einem schrittweisen Ansatz erstellt. Jeder Schritt f√ºgte eine spezifische Funktionalit√§t hinzu, sodass Sie verstehen k√∂nnen, wie jedes Element zum Endergebnis beitr√§gt.",
      "concepts_title": "üìö Gelernte Konzepte:",
      "concepts": [
        "‚Ä¢ Organisierte Imports: Wie man Projektabh√§ngigkeiten strukturiert",
        "‚Ä¢ Responsives Layout: Verwendung von AppShell und Grid-System",
        "‚Ä¢ Visuelle Komponenten: Cards, Abschnitte und UI-Elemente",
        "‚Ä¢ Datenvisualisierungen: Verschiedene Diagrammtypen mit Plotly",
        "‚Ä¢ Interaktive Tabellen: AG-Grid mit erweiterten Funktionen",
        "‚Ä¢ Dynamische Themes: Hell/Dunkel-Umschaltsystem",
        "‚Ä¢ Callbacks: Client-seitige und server-seitige Interaktivit√§t"
      ]
    },
    "footer": {
      "acknowledgments": "Danksagungen",
      "acknowledgments_text": "Besonderen Dank an LaPS - Signalverarbeitungslabor an der UFPA f√ºr die Unterst√ºtzung und an Professor Ronaldo de Freitas Zampolo f√ºr die Betreuung.",
      "about_author": "√úber den Autor",
      "author_name": "Jo√£o Natividade Neto",
      "author_description": "Student der Computertechnik an der Bundesuniversit√§t von Par√° - UFPA.",
      "copyright": "¬© 2025 Dash-Leitfaden. Erstellt f√ºr Bildungszwecke."
    }
  }
}